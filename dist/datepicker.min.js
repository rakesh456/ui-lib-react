import React, { Fragment } from 'react';
import { Input } from 'reactstrap';
import { FaCalendar, FaCaretLeft, FaCaretRight } from 'react-icons/lib/fa';
import { isDate as isDate$1 } from 'util';
import ReactDOM from 'react-dom';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

// Calendar months names
var MONTH_NAMES = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var WEEK_SHORT_NAMES = ["S", "M", "T", "W", "T", "F", "S"];
function getMonthNameByIndex(index) {
  return MONTH_NAMES[index].toUpperCase();
}
function splitArray(array, chunk_size) {
  var index = 0;
  var arrayLength = array.length;
  var tempArray = [];

  for (index = 0; index < arrayLength; index += chunk_size) {
    var myChunk = array.slice(index, index + chunk_size);
    tempArray.push(myChunk);
  }

  return tempArray;
}
function getDateDDMMYYYY(date) {
  var d = new Date(date),
      month = '' + (d.getMonth() + 1),
      day = '' + d.getDate(),
      year = d.getFullYear();
  if (month.length < 2) month = '0' + month;
  if (day.length < 2) day = '0' + day;
  return [day, month, year].join('/');
}
function convertYYYYMMDD(date) {
  var d = date.split("/"),
      month = '' + d[1],
      day = '' + d[0],
      year = d[2];
  if (month.length < 2) month = '0' + month;
  if (day.length < 2) day = '0' + day;
  return [year, month, day].join('-');
}
function guid() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}
function s4() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}

var DateInput =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(DateInput, _React$PureComponent);

  function DateInput(props) {
    var _this;

    _classCallCheck(this, DateInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateInput).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "gotoDate", function (date) {
      return function (evt) {
        evt && evt.preventDefault();
        var date = _this.state.date;
        var onBlur = _this.props.onBlur;
        date && _this.setState(_this.state.date, function () {
          typeof onBlur === "function" && onBlur(date);
        });
      };
    });

    _this.state = {
      date: getDateDDMMYYYY(new Date())
    };
    return _this;
  }

  _createClass(DateInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        date: getDateDDMMYYYY(this.props.value)
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.setState({
        date: getDateDDMMYYYY(this.props.value)
      });
    }
  }, {
    key: "handleChange",
    value: function handleChange(name, e) {
      var change = {};
      change[name] = e.target.value;
      this.setState(change);
    }
  }, {
    key: "getIconAlignClass",
    value: function getIconAlignClass() {
      var options = this.props.options;
      return options && options.iconAlignment === 'Left' ? 'VS-PullLeft VS-MrgT5' : 'VS-PullRight VS-MrgT5';
    }
  }, {
    key: "getDateAlignClass",
    value: function getDateAlignClass() {
      var options = this.props.options;
      return options && options.dateStringAlignment === 'Right' ? 'VS-PullRight VS-TextRight' : 'VS-PullLeft VS-TextLeft';
    }
  }, {
    key: "render",
    value: function render() {
      var disable = this.props.options && this.props.options.disable === true;
      return React.createElement("div", {
        className: "VS-Input-Border ".concat(disable ? 'VS-Disabled' : '')
      }, React.createElement("span", {
        className: this.getIconAlignClass()
      }, React.createElement(FaCalendar, {
        className: "VS-Shape VS-TextDark VS-CalenderIcon"
      })), React.createElement(Input, {
        type: "text",
        disabled: disable,
        value: this.state.date,
        className: "VS-Regular-UPPER-Case VS-Calendar-Input ".concat(this.getDateAlignClass()),
        placeholder: "DD/MM/YYYY",
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        onChange: this.handleChange.bind(this, this.state.date)
      }));
    }
  }]);

  return DateInput;
}(React.PureComponent);

var CalendarWeek =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(CalendarWeek, _React$PureComponent);

  function CalendarWeek(props) {
    var _this;

    _classCallCheck(this, CalendarWeek);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarWeek).call(this, props));
    _this.state = {
      month: new Date().getMonth(),
      year: new Date().getFullYear()
    };
    return _this;
  }

  _createClass(CalendarWeek, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {}
  }, {
    key: "render",
    value: function render() {
      var weekItems = WEEK_SHORT_NAMES.map(function (number, index) {
        return React.createElement("span", {
          className: "VS-Day VS-Medium-UPPER-Case",
          key: index
        }, number);
      });
      return React.createElement("div", {
        className: "VS-CalendarWeek"
      }, weekItems);
    }
  }]);

  return CalendarWeek;
}(React.PureComponent);

var CalendarMonth =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(CalendarMonth, _React$PureComponent);

  function CalendarMonth(props) {
    var _this;

    _classCallCheck(this, CalendarMonth);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarMonth).call(this, props));
    _this.state = {};
    return _this;
  }

  _createClass(CalendarMonth, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {}
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          month = _this$props.month,
          year = _this$props.year;
      return React.createElement("div", {
        className: "VS-CalendarMonth VS-TextCenter"
      }, React.createElement(FaCaretLeft, {
        className: "VS-PullLeft VS-Icon",
        onClick: this.props.goToPrevMonth
      }), React.createElement("span", {
        className: "VS-Medium-UPPER-Case VS-MonthName"
      }, getMonthNameByIndex(month - 1), " ", year), React.createElement(FaCaretRight, {
        className: "VS-PullRight VS-Icon",
        onClick: this.props.goToNextMonth
      }));
    }
  }]);

  return CalendarMonth;
}(React.PureComponent);

var CURRENT_YEAR = +new Date().getFullYear();
var CURRENT_MONTH = +new Date().getMonth() + 1;
var WEEK_COUNT = 6;
var zeroPad = function zeroPad(value, length) {
  return "".concat(value).padStart(length, '0');
};
var getMonthDays = function getMonthDays() {
  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CURRENT_MONTH;
  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURRENT_YEAR;
  var months30 = [4, 6, 9, 11];
  var leapYear = year % 4 === 0;
  return month === 2 ? leapYear ? 29 : 28 : months30.includes(month) ? 30 : 31;
};
var getPreviousMonth = function getPreviousMonth(month, year) {
  var prevMonth = month > 1 ? month - 1 : 12;
  var prevMonthYear = month > 1 ? year : year - 1;
  return {
    month: prevMonth,
    year: prevMonthYear
  };
};
var getNextMonth = function getNextMonth(month, year) {
  var nextMonth = month < 12 ? month + 1 : 1;
  var nextMonthYear = month < 12 ? year : year + 1;
  return {
    month: nextMonth,
    year: nextMonthYear
  };
};
var getMonthFirstDay = function getMonthFirstDay() {
  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CURRENT_MONTH;
  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURRENT_YEAR;
  return +new Date("".concat(year, "-").concat(zeroPad(month, 2), "-01")).getDay() + 1;
};
var calendar = (function () {
  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CURRENT_MONTH;
  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURRENT_YEAR;
  var monthDays = getMonthDays(month, year);
  var monthFirstDay = getMonthFirstDay(month, year);
  var daysFromPrevMonth = monthFirstDay - 1;
  var daysFromNextMonth = WEEK_COUNT * 7 - (daysFromPrevMonth + monthDays);

  var _getPreviousMonth = getPreviousMonth(month, year),
      prevMonth = _getPreviousMonth.month,
      prevMonthYear = _getPreviousMonth.year;

  var _getNextMonth = getNextMonth(month, year),
      nextMonth = _getNextMonth.month,
      nextMonthYear = _getNextMonth.year;

  var prevMonthDays = getMonthDays(prevMonth, prevMonthYear);

  var prevMonthDates = _toConsumableArray(new Array(daysFromPrevMonth)).map(function (n, index) {
    var day = index + 1 + (prevMonthDays - daysFromPrevMonth);
    return [prevMonthYear, zeroPad(prevMonth, 2), zeroPad(day, 2)];
  });

  var thisMonthDates = _toConsumableArray(new Array(monthDays)).map(function (n, index) {
    var day = index + 1;
    return [year, zeroPad(month, 2), zeroPad(day, 2)];
  });

  var nextMonthDates = _toConsumableArray(new Array(daysFromNextMonth)).map(function (n, index) {
    var day = index + 1;
    return [nextMonthYear, zeroPad(nextMonth, 2), zeroPad(day, 2)];
  });

  return [].concat(_toConsumableArray(prevMonthDates), _toConsumableArray(thisMonthDates), _toConsumableArray(nextMonthDates));
}); // (bool) Checks if a value is a date - this is just a simple check

var isDate = function isDate(date) {
  var isDate = Object.prototype.toString.call(date) === '[object Date]';
  var isValidDate = date && !Number.isNaN(date.valueOf());
  return isDate && isValidDate;
}; // (bool) Checks if two date values are of the same month and year

var isSameMonth = function isSameMonth(date) {
  var basedate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  if (!(isDate(date) && isDate(basedate))) return false;
  var basedateMonth = +basedate.getMonth() + 1;
  var basedateYear = basedate.getFullYear();
  var dateMonth = +date.getMonth() + 1;
  var dateYear = date.getFullYear();
  return +basedateMonth === +dateMonth && +basedateYear === +dateYear;
}; // (bool) Checks if two date values are the same day

var isSameDay = function isSameDay(date) {
  var basedate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  if (!(isDate(date) && isDate(basedate))) return false;
  var basedateDate = basedate.getDate();
  var basedateMonth = +basedate.getMonth() + 1;
  var basedateYear = basedate.getFullYear();
  var dateDate = date.getDate();
  var dateMonth = +date.getMonth() + 1;
  var dateYear = date.getFullYear();
  return basedateDate === dateDate && basedateMonth === dateMonth && basedateYear === dateYear;
}; // (string) Formats the given date as YYYY-MM-DD
// Months and Days are zero padded

var getIsoDate = function getIsoDate() {
  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  if (!isDate(date)) return null;
  return [date.getFullYear(), zeroPad(+date.getMonth() + 1, 2), zeroPad(+date.getDate(), 2)].join('-');
};
var checkDateInBetween = function checkDateInBetween(date, from, to) {
  if (isDate(date)) {
    if (isDate(from) && isDate(to) && (date.getTime() < from.getTime() || date.getTime() > to.getTime())) {
      return false;
    } else if (isDate(from) && date.getTime() >= from.getTime()) {
      return true;
    } else if (isDate(to) && date.getTime() <= to.getTime()) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

var CalendarDays =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(CalendarDays, _React$PureComponent);

  function CalendarDays(_props) {
    var _this;

    _classCallCheck(this, CalendarDays);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarDays).call(this, _props));

    _defineProperty(_assertThisInitialized(_this), "getCalendarDates", function () {
      var _this$props = _this.props,
          month = _this$props.month,
          year = _this$props.year;
      var current = _this.state.current;
      var calendarMonth = month || +current.getMonth() + 1;
      var calendarYear = year || current.getFullYear();
      return splitArray(calendar(calendarMonth, calendarYear), 7); // return splitArray(getStaticDays(), 7);
    });

    _defineProperty(_assertThisInitialized(_this), "selectDate", function (_date) {
      _this.props.changeSelectedDate(_date);

      _this.setState({
        current: new Date(_date)
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderCalendarDate", function (date, index) {
      var _this$props2 = _this.props,
          month = _this$props2.month,
          year = _this$props2.year;
      var _this$state = _this.state,
          current = _this$state.current,
          today = _this$state.today;

      var _date = new Date(date);

      var props = {
        index: index,
        title: _date.toDateString()
      };
      var inMonth = month && year && isSameMonth(_date, new Date([year, month, 1].join("-")));
      var isToday = isSameDay(_date, today);
      var isCurrent = current && isSameDay(_date, new Date(convertYYYYMMDD(current)));
      var options = _this.props.options;
      var lowerDateLimit = options && options.lowerDateLimit ? isDate$1(options.lowerDateLimit) ? options.lowerDateLimit : null : options.lowerDateLimit !== null ? new Date() : null;
      var upperDateLimit = options && options.upperDateLimit ? isDate$1(options.upperDateLimit) ? options.upperDateLimit : null : null;
      var isEnabled = isToday || checkDateInBetween(_date, lowerDateLimit, upperDateLimit);
      var dayClassName = isCurrent ? 'VS-DaySelected' : isToday ? 'VS-DayCurrent' : 'VS-NormalDay';
      var padClassName = _date.getDate() <= 9 ? 'VS-PadExtra' : '';
      return React.createElement(Fragment, {
        key: guid()
      }, isEnabled ? React.createElement("div", _extends({}, props, {
        className: _this.getClassName(props.index),
        onClick: function onClick() {
          return _this.selectDate(_date);
        }
      }), inMonth ? React.createElement("span", {
        className: "VS-CalDay ".concat(dayClassName, " ").concat(padClassName)
      }, _date.getDate()) : React.createElement("span", {
        className: "VS-NextPrevDay ".concat(padClassName)
      }, _date.getDate())) : React.createElement("div", _extends({}, props, {
        className: _this.getClassName(props.index)
      }), React.createElement("span", {
        className: 'VS-DisabledDay'
      }, _date.getDate())));
    });

    _defineProperty(_assertThisInitialized(_this), "renderCalendarRow", function (dates, index) {
      var rows = dates.map(function (date, index1) {
        return _this.renderCalendarDate(date, index1);
      });
      return React.createElement("div", {
        className: "VS-DateRow",
        key: guid()
      }, rows);
    });

    _defineProperty(_assertThisInitialized(_this), "getClassName", function (index) {
      return index % 6 === 0 ? 'VS-Day VS-Medium-UPPER-Case VS-DayStart' : 'VS-Day VS-Medium-UPPER-Case';
    });

    _this.state = {
      current: getDateDDMMYYYY(new Date())
    };
    return _this;
  }

  _createClass(CalendarDays, [{
    key: "dismiss",
    value: function dismiss() {
      this.props.onBlur();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        current: this.props.selectedDate
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.selectedDate === this.state.current) {
        this.setState({
          current: this.props.selectedDate
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // const { selectedDate } = this.props;
      return React.createElement("div", {
        className: "VS-CalendarDay"
      }, React.createElement(Fragment, null, this.getCalendarDates().map(function (row, index) {
        return _this2.renderCalendarRow(row, index);
      })));
    }
  }]);

  return CalendarDays;
}(React.PureComponent);

var calendarModal = null;

var CalendarDisplay =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(CalendarDisplay, _React$PureComponent);

  function CalendarDisplay(props) {
    var _this;

    _classCallCheck(this, CalendarDisplay);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarDisplay).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "changeSelectedDate", function (_date) {
      _this.props.changeSelectedDate(_date);
    });

    _defineProperty(_assertThisInitialized(_this), "goToPrevMonth", function () {
      if (_this.state.month === 1) {
        _this.setState({
          month: 12,
          year: _this.state.year - 1
        });
      } else {
        _this.setState({
          month: _this.state.month - 1
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "goToNextMonth", function () {
      if (_this.state.month === 12) {
        _this.setState({
          month: 1,
          year: _this.state.year + 1
        });
      } else {
        _this.setState({
          month: _this.state.month + 1
        });
      }
    });

    var selectedDate = _this.props && _this.props.selectedDate ? new Date(convertYYYYMMDD(_this.props.selectedDate)) : new Date();
    _this.state = {
      month: selectedDate.getMonth() + 1,
      year: selectedDate.getFullYear()
    };
    _this.el = document.createElement('div');
    return _this;
  }

  _createClass(CalendarDisplay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      calendarModal = document.getElementById('modalroot');
      calendarModal.appendChild(this.el);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {}
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      calendarModal = document.getElementById('modalroot');
      calendarModal.removeChild(this.el);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          month = _this$state.month,
          year = _this$state.year;
      var selectedDate = this.props.selectedDate;

      if (!this.props.shouldCalendarOpen) {
        return null;
      }

      return React.createElement("div", {
        className: "VS-CalendarContainer VS-shape-rounded-fill VS-modal",
        style: this.props.style
      }, React.createElement(CalendarMonth, {
        month: month,
        year: year,
        goToNextMonth: this.goToNextMonth,
        goToPrevMonth: this.goToPrevMonth
      }), React.createElement(CalendarWeek, null), React.createElement(CalendarDays, {
        options: this.props.options,
        selectedDate: selectedDate,
        month: month,
        year: year,
        changeSelectedDate: this.changeSelectedDate
      }));
    }
  }]);

  return CalendarDisplay;
}(React.PureComponent);

var calendarModal$1 = null;

var CalendarPortal =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(CalendarPortal, _React$PureComponent);

  function CalendarPortal(props) {
    var _this;

    _classCallCheck(this, CalendarPortal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarPortal).call(this, props));
    _this.el = document.createElement('div');
    return _this;
  }

  _createClass(CalendarPortal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      calendarModal$1 = document.getElementById('modalroot');
      calendarModal$1.appendChild(this.el);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {}
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {// calendarModal.removeChild(this.el);
    }
  }, {
    key: "render",
    value: function render() {
      return ReactDOM.createPortal(this.props.children, this.el);
    }
  }]);

  return CalendarPortal;
}(React.PureComponent);

var DatePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(DatePicker, _React$PureComponent);

  function DatePicker(props) {
    var _this;

    _classCallCheck(this, DatePicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatePicker).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleDateChange", function (date) {
      var newDate = getIsoDate(date);

      _this.setState({
        date: newDate,
        shouldCalendarOpen: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function () {
      _this.setState({
        shouldCalendarOpen: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "closeCalendar", function (e) {
      if (e.target && e.target.classList && !e.target.classList.contains("VS-Calendar-Input") && !e.target.classList.contains("VS-Day") && !e.target.classList.contains("VS-CalDay") && !e.target.classList.contains("VS-NextPrevDay") && !e.target.classList.contains("VS-Icon") && _this.state.shouldCalendarOpen === true) {
        _this.setState({
          shouldCalendarOpen: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function () {});

    _defineProperty(_assertThisInitialized(_this), "handleChildUnmount", function (_date) {
      _this.setState({
        date: _date,
        shouldCalendarOpen: false
      });
    });

    _this.state = {
      date: new Date(),
      shouldCalendarOpen: false
    };
    _this.handleChildUnmount = _this.handleChildUnmount.bind(_assertThisInitialized(_this));
    _this.state1 = Object.assign({}, props.options);
    console.log(' this.state ', _this.state1);
    _this.style = {};
    return _this;
  }

  _createClass(DatePicker, [{
    key: "handleChildUnmount",
    value: function handleChildUnmount() {
      this.setState({
        shouldCalendarOpen: false
      });
    }
  }, {
    key: "updateDimensions",
    value: function updateDimensions() {
      var w = window,
          d = document,
          documentElement = d.documentElement,
          body = d.getElementsByTagName('body')[0],
          width = w.innerWidth || documentElement.clientWidth || body.clientWidth,
          height = w.innerHeight || documentElement.clientHeight || body.clientHeight;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('click', this.closeCalendar);
      var dimensions = this.el.getBoundingClientRect();
      var style = {};
      style.left = dimensions.left;
      style.right = dimensions.right;
      style.top = dimensions.top + 42;
      style.bottom = dimensions.bottom;
      this.setState({
        style: style
      });
      window.addEventListener("resize", this.updateDimensions);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {}
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          shouldCalendarOpen = _this$state.shouldCalendarOpen,
          date = _this$state.date;
      return React.createElement("div", {
        className: "VS-App"
      }, React.createElement("div", {
        id: "modalroot"
      }), React.createElement("header", {
        className: "VS-App-header"
      }, React.createElement("div", {
        className: "VS-DatepickerContainer"
      }, React.createElement("div", {
        ref: function ref(el) {
          return _this2.el = el;
        }
      }, React.createElement(DateInput, {
        options: this.props.options,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        value: date
      })), shouldCalendarOpen ? React.createElement(CalendarPortal, {
        parent: "#parent",
        position: "right",
        arrow: "center"
      }, React.createElement(CalendarDisplay, {
        style: this.state.style,
        options: this.props.options,
        selectedDate: getDateDDMMYYYY(date),
        shouldCalendarOpen: shouldCalendarOpen,
        changeSelectedDate: this.handleDateChange
      })) : '')));
    }
  }]);

  return DatePicker;
}(React.PureComponent);

function App() {
  var options = {
    displayFormat: 'MM/DD/YYYY',
    iconAlignment: 'Left',
    dateStringAlignment: 'Right'
  };
  return React.createElement("div", {
    className: "VS-App"
  }, React.createElement("div", {
    id: "modalroot"
  }), React.createElement("header", {
    className: "VS-App-header"
  }, React.createElement(DatePicker, {
    options: options
  })));
}
//   render: function(){
//       return (
//           <div id="app">
//               TEST
//           </div>
//       );
//   }
// });
// module.exports = App;

export default App;
